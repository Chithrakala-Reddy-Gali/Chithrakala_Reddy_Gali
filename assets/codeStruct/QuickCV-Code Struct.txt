Here is the basic code structure for the QuickCV - Resume Building application using Spring Boot and ReactJs.
This is not an entire project, only providing the core components to get an idea to start with:
----------------------------------------------------------------------------------------
Project Structure:

QuickCV/
├── backend/                        
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/
│   │   │   │   └── com/
│   │   │   │       └── quickcv/
│   │   │   │           ├── controller/
│   │   │   │           ├── model/
│   │   │   │           ├── repository/
│   │   │   │           └── service/
│   │   │   ├── resources/
│   │   │   │   └── application.properties
│   ├── pom.xml                     
├── frontend/                       
│   ├── src/
│   │   ├── components/              
│   │   ├── pages/                   
│   │   ├── App.js                   
│   ├── package.json                 
└── README.md
------------------------------------------------------------------------------------
Backend (Spring Boot + MySQL)
Controller (ResumeController.java)

package com.quickcv.controller;

import com.quickcv.model.Resume;
import com.quickcv.service.ResumeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/resumes")
public class ResumeController {

    @Autowired
    private ResumeService resumeService;

    @PostMapping
    public Resume createResume(@RequestBody Resume resume) {
        return resumeService.saveResume(resume);
    }

    @GetMapping("/{id}")
    public Resume getResume(@PathVariable Long id) {
        return resumeService.getResumeById(id);
    }
}
--------------------------------------------------------------------------------
Service (ResumeService.java)

package com.quickcv.service;

import com.quickcv.model.Resume;
import com.quickcv.repository.ResumeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ResumeService {

    @Autowired
    private ResumeRepository resumeRepository;

    public Resume saveResume(Resume resume) {
        return resumeRepository.save(resume);
    }

    public Resume getResumeById(Long id) {
        return resumeRepository.findById(id).orElse(null);
    }
}
-------------------------------------------------------------------------------------------------
Model (Resume.java)

package com.quickcv.model;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Resume {

    @Id
    private Long id;
    private String name;
    private String email;
    private String phone;
    private String experience;
    private String education;

    // Getters and Setters
}
--------------------------------------------------------------------------------------------------------------
Repository (ResumeRepository.java)

package com.quickcv.repository;

import com.quickcv.model.Resume;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ResumeRepository extends JpaRepository<Resume, Long> {
}
---------------------------------------------------------------------------------------------------------------------
Application Properties (application.properties)

spring.datasource.url=jdbc:mysql://localhost:3306/quickcv
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
--------------------------------------------------------------------------------------------------------------------
Frontend (ReactJS)
Main App Component (App.js)

import React, { useState, useEffect } from 'react';
import ResumeEditor from './components/ResumeEditor';

function App() {
  const [resumeData, setResumeData] = useState(null);

  // Fetch resume data from backend (for preview)
  useEffect(() => {
    fetch("/api/resumes/1")
      .then((response) => response.json())
      .then((data) => setResumeData(data));
  }, []);

  return (
    <div className="App">
      <h1>QuickCV - Create Your Resume</h1>
      <ResumeEditor resumeData={resumeData} />
    </div>
  );
}

export default App;
-------------------------------------------------------------------------------------------------------------------------
Resume Editor Component (ResumeEditor.js)

import React, { useState } from 'react';

function ResumeEditor({ resumeData }) {
  const [resume, setResume] = useState(resumeData || {
    name: '',
    email: '',
    phone: '',
    experience: '',
    education: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setResume({ ...resume, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetch('/api/resumes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(resume),
    })
      .then((response) => response.json())
      .then((data) => alert('Resume saved successfully!'));
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>Name:</label>
      <input
        type="text"
        name="name"
        value={resume.name}
        onChange={handleChange}
      />
      <br />
      <label>Email:</label>
      <input
        type="email"
        name="email"
        value={resume.email}
        onChange={handleChange}
      />
      <br />
      <label>Phone:</label>
      <input
        type="text"
        name="phone"
        value={resume.phone}
        onChange={handleChange}
      />
      <br />
      <label>Experience:</label>
      <textarea
        name="experience"
        value={resume.experience}
        onChange={handleChange}
      />
      <br />
      <label>Education:</label>
      <textarea
        name="education"
        value={resume.education}
        onChange={handleChange}
      />
      <br />
      <button type="submit">Save Resume</button>
    </form>
  );
}

export default ResumeEditor;
-------------------------------------------------------------------------------------------------------------------------
MySQL Database:

CREATE DATABASE quickcv;

USE quickcv;

CREATE TABLE resume (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  phone VARCHAR(20),
  experience TEXT,
  education TEXT
);
------------------------------------------------------------------------------------------------------------------------------------
Maven Dependencies (pom.xml for Spring Boot)

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>com.mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
</dependencies>

----------------------------------------------------------------------------------------------------
This is a basic implementation to help you get started. 
You can add additional features based on your requirements.